

// import { describe, it, expect, beforeEach, vi } from 'vitest';
// import { mockDeep, DeepMockProxy } from 'vitest-mock-extended';
// import { PrismaClient, Role, User } from '@prisma/client';
// import { prisma } from '@/lib/prisma';
// import { hash } from 'bcryptjs';
// import { NextApiRequest, NextApiResponse } from 'next';
// import handler from '@/pages/api/users/create';

// vi.mock('@/lib/prisma', () => ({
//   prisma: mockDeep<PrismaClient>(),
// }));

// describe('users API', async() => {
//   const mockPrisma = prisma as DeepMockProxy<PrismaClient>;
// //const password = await hash(req.body.password, 12);
  
//   const newUser = { 
//     name: 'test user', 
//     email: 'test@example.com', 
//     role: Role.ADMIN,
//     password: await hash("Passer123@", 12),
//  };

//   beforeEach(() => {
//     vi.clearAllMocks();
//   });

//   it("should add new user", async() => {
//         // Mock du comportement de Prisma pour la création d'un utilisateur
//         mockPrisma.user.create.mockResolvedValue(newUser);

//         const req = {
//             method: "POST",
//             body: {
//                 name: 'test user', 
//                 email: 'test@example.com', 
//                 role: Role.ADMIN,
//                 password: await hash("Passer123@", 12)
//             },
//             query: {},
//             cookies: {},
//             env: process.env,
//             aborted: false,
//         } as unknown as NextApiRequest;

//         // Création d'un mock de NextApiResponse
//         const res = {
//             status: vi.fn().mockReturnThis(),
//             json: vi.fn(),
//             setHeader: vi.fn(),
//         } as unknown as NextApiResponse;

//         await handler(req, res);

//         expect(res.status).toHaveBeenCalledWith(201);
//   });

//   it("Should delete user", async() => {

//   })
// });